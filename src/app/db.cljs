(ns app.db)

(def binary-image
  [[0 1 0 1 1 0 0 1 0 1 0 0 0 0 0 0 1 1]
   [0 1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 0 1]
   [0 0 1 0 0 1 1 1 0 1 0 0 0 0 1 1 1 0]
   [0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1]
   [0 0 0 0 1 0 1 1 0 1 0 0 1 1 1 0 1 1]
   [1 1 0 0 1 1 1 0 1 0 0 1 0 1 0 1 0 1]
   [0 0 0 0 1 1 0 1 0 1 1 1 1 0 1 1 1 0]
   [1 1 0 0 0 0 1 0 1 0 0 1 0 1 0 1 0 1]
   [0 0 0 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1]
   [1 1 0 0 1 1 0 0 1 0 0 0 0 1 0 1 0 1]
   [0 0 0 0 0 0 1 1 0 1 1 0 1 0 1 1 1 0]
   [1 1 0 0 1 1 1 0 1 0 0 1 1 1 1 1 0 1]
   [0 0 0 0 1 1 0 1 0 1 0 0 1 0 1 0 1 1]
   [1 1 0 0 0 0 1 0 1 0 1 1 0 0 0 1 0 1]
   [0 0 0 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0]
   [1 1 0 0 1 1 0 0 1 0 1 1 0 0 0 1 0 1]
   [0 0 1 0 0 0 1 1 0 1 0 0 1 1 1 0 1 1]
   [1 1 1 0 1 1 1 0 1 0 1 1 0 0 1 1 0 1]])

(def default-db
  {:todos (sorted-map-by >)
   :image binary-image})
